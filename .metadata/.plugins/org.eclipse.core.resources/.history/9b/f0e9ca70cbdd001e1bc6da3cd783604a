package com.sathya.servlet;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


public class ProjectDao {
	 
	    public int save(product product) {
	        Connection connection = null;
	        PreparedStatement preparedStatement = null;
	        int count = 0;
	        try {
	            // Establish database connection
	            connection = Dbconnection.CreateConnection();

	            // Prepare SQL statement for insertion
	            preparedStatement = connection.prepareStatement("insert into product2 values(?,?,?,?,?,?,?,?)");

	            // Set values for each parameter in the prepared statement 
	            preparedStatement.setString(1, product.getProId());
	            preparedStatement.setString(2, product.getProName());
	            preparedStatement.setDouble(3, product.getProPrice());
	            preparedStatement.setString(4, product.getProBrand());
	            preparedStatement.setString(5, product.getProMadeIn());
	            preparedStatement.setDate(6, product.getProMfgDate());
	            preparedStatement.setDate(7, product.getProExpDate());
	            preparedStatement.setBytes(8, product.getProImage());

	            // Execute the SQL statement and get the number of affected rows
	            count = preparedStatement.executeUpdate();
	        } catch (SQLException e) {
	            // Handle any SQL exceptions
	            e.printStackTrace();
	        } finally {
	            // Close resources in reverse order of their creation to avoid resource leaks
	            try {
	                if (preparedStatement != null) {
	                    preparedStatement.close();
	                }
	                if (connection != null) {
	                    connection.close();
	                }
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	        }
	        // Return the count of affected rows (0 if no rows were inserted)
	        return count;
	    }
	    //method:
	public List<product>findAll()
		
		{
			List<product>productList=new ArrayList<product>();
			try(Connection connection=Dbconnection.CreateConnection();
					Statement statement =connection.createStatement())
			{
				
			
				   ResultSet resultset=statement.executeQuery("select * from product2");
				//add the employee object:
				   while(resultset.next())
				   {
					    product product =new product();
					   product.setProId(resultset.getString("proId"));
					   product.setProName(resultset.getString("proName"));
					   product.setProPrice(resultset.getDouble("proPrice"));
					   product.setProBrand(resultset.getString("proBrand"));
					   product.setProMadeIn(resultset.getString("proMadeIn"));
					   product.setProMfgDate(resultset.getDate("proMfgdate"));
					   product.setProExpDate(resultset.getDate("proExpDate"));
					   product.setProImage(resultset.getBytes("proImage"));
					   productList.add(product);
				   }
			}
			catch(SQLException e)
			{
				e.printStackTrace();
			}
			return productList;
		}
	
	//delete by id
	public int deleteById(String proId)
	 {
		 int count=0;
		 try(Connection connection=Dbconnection.CreateConnection();
		PreparedStatement preparedStatement=connection.prepareStatement("delete from product2 where proID=?");)
		 {   
			    preparedStatement.setString(1,proId);
		    
			   count=preparedStatement.executeUpdate();
			   
			  
		   }
	 
	      catch(SQLException e)
		      {
		    	  e.printStackTrace();
		      }
		        return count;
			}
	public product findById(String proId)
	 {
		 product product=new product();
		 try(Connection connection=Dbconnection.CreateConnection();
		PreparedStatement preparedStatement=connection.prepareStatement("select * from product2 where proID=?");)
		 {   
			    preparedStatement.setString(1,proId);
		    
			   ResultSet resultset=preparedStatement.executeQuery();
			   if(resultset.next())
			   {
				   product.setProId(resultset.getString(1));
					product.setProName(resultset.getString(2));
					product.setProBrand(resultset.getString(3));
					product.setProPrice(resultset.getDouble(4));
					product.setProMadeIn(resultset.getString(5));
					product.setProMfgDate(resultset.getDate(6));
					product.setProExpDate(resultset.getDate(7));
					product.setProImage(resultset.getBytes(8));
			   }		
			  
		   }
	 
	      catch(SQLException e)
		      {
		    	  e.printStackTrace();
		      }
		        return product;
			}
	      
	       
  
	       

	
	
	
	}


